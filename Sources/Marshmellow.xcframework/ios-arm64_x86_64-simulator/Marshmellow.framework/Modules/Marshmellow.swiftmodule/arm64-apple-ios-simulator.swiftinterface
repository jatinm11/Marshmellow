// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Marshmellow
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import Marshmellow
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum MellowHttpMethod : Swift.String {
  case get
  case post
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MellowRequestParams {
  case body([Swift.String : Any]?)
  case url([Swift.String : Swift.String]?)
}
public enum MellowError : Swift.Error {
  case invalidURL(Foundation.URL?)
  case invalidResponse(Foundation.HTTPURLResponse?)
  case invalidData(Foundation.Data?)
  case statusCode(Swift.Int)
  case noData
  case unableToComplete
}
public class MellowRequestBuilder : Marshmellow.MellowRequestProtcol {
  required public init(baseURL: Foundation.URL, path: Swift.String, scheme: Swift.String = "https")
  public init(baseURL: Foundation.URL, path: Swift.String, method: Marshmellow.MellowHttpMethod = .get, scheme: Swift.String = "https", headers: [Swift.String : Swift.String]? = nil, parameters: Marshmellow.MellowRequestParams? = nil)
  @discardableResult
  public func set(method: Marshmellow.MellowHttpMethod) -> Self
  @discardableResult
  public func set(path: Swift.String) -> Self
  @discardableResult
  public func set(scheme: Swift.String) -> Self
  @discardableResult
  public func set(headers: [Swift.String : Swift.String]?) -> Self
  @discardableResult
  public func set(parameters: Marshmellow.MellowRequestParams) -> Self
  public func buildRequest() -> (request: Foundation.URLRequest?, error: Marshmellow.MellowError?)
  @objc deinit
}
public protocol MellowRequestProtcol {
  init(baseURL: Foundation.URL, path: Swift.String, scheme: Swift.String)
  @discardableResult
  func set(method: Marshmellow.MellowHttpMethod) -> Self
  @discardableResult
  func set(path: Swift.String) -> Self
  @discardableResult
  func set(scheme: Swift.String) -> Self
  @discardableResult
  func set(headers: [Swift.String : Swift.String]?) -> Self
  @discardableResult
  func set(parameters: Marshmellow.MellowRequestParams) -> Self
}
public protocol MellowNetworkProtocol {
  func makeRequest<T>(with builder: Marshmellow.MellowRequestBuilder, type: T.Type, completion: @escaping (Swift.Result<T, Marshmellow.MellowError>) -> Swift.Void) where T : Swift.Decodable
}
public class Marshmellow : Marshmellow.MellowNetworkProtocol {
  public init()
  public func setKeyDecodingStrategy(_ strategy: Foundation.JSONDecoder.KeyDecodingStrategy)
  public func makeRequest<T>(with builder: Marshmellow.MellowRequestBuilder, type: T.Type, completion: @escaping (Swift.Result<T, Marshmellow.MellowError>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
extension Marshmellow.MellowHttpMethod : Swift.Equatable {}
extension Marshmellow.MellowHttpMethod : Swift.Hashable {}
extension Marshmellow.MellowHttpMethod : Swift.RawRepresentable {}
